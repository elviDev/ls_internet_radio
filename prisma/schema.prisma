datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  username      String    
  bio           String?
  passwordResetTokens PasswordResetToken[]
  role          Role      @default(USER)
  profileImage  String?  
  emailVerified Boolean  @default(false)
  verificationToken String? @unique
  verificationTokens VerificationToken[]
  verificationTokenExpires DateTime?
  resetPasswordToken        String?  @unique
  resetPasswordTokenExpires DateTime?
  audiobooks Audiobook[] 
  podcasts    Podcast[]
  comments      Comment[]
  reviews       Review[]
  bookmarks     Bookmark[]
  playbackProgress PlaybackProgress[]
  favorites     Favorite[]
  notifications Notification[]
  playlists     Playlist[]
  mediaHistories MediaHistory[]
  reports       Report[]  @relation("UserReports")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}



enum Role {
  USER
  ADMIN
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model VerificationToken {
  id         String   @id @default(cuid())
  token      String   @unique
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  type       String   // "email_verification" | "password_reset"
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}


model Genre {
  id          String      @id @default(cuid())
  name        String      @unique
  slug        String      @unique
  description String?
  coverImage  String?
  audiobooks  Audiobook[]
  podcasts Podcast[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}


enum AudiobookStatus {
  DRAFT
  PUBLISHED
}



model Audiobook {
  id           String   @id @default(cuid())
  title        String
  slug         String   @unique
  narrator     String
  description  String
  coverImage   String
  duration     Int
  releaseDate  DateTime
  status       AudiobookStatus @default(DRAFT)
  playCount    Int      @default(0)
  likeCount    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  authorId     String
  author       User      @relation(fields: [authorId], references: [id])
  genreId     String
  genre       Genre      @relation(fields: [genreId], references: [id])
  transcription Transcription?
  chapters     Chapter[]
  comments     Comment[]
  reviews      Review[]
  bookmarks    Bookmark[]
  playbackProgress PlaybackProgress[]
  favorites    Favorite[]
  playlistItems PlaylistItem[]
  mediaHistories MediaHistory[]
}


model Chapter {
  id          String   @id @default(cuid())
  title       String
  audioFile   String
  duration    Int
  trackNumber Int
  isDraft     Boolean  @default(true)
  playCount   Int      @default(0)
  audiobookId String
  audiobook   Audiobook @relation(fields: [audiobookId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
}


model Podcast {
  id           String   @id @default(cuid())
  title        String
  host         String
  guests       String?
  description  String
  coverImage   String
  audioFile    String
  duration     Int
  releaseDate  DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  genreId     String
  genre       Genre      @relation(fields: [genreId], references: [id])
  transcription Transcription?
  comments     Comment[]
  reviews      Review[]
  bookmarks    Bookmark[]
  playbackProgress PlaybackProgress[]
  favorites    Favorite[]
  playlistItems PlaylistItem[]
  mediaHistories MediaHistory[]
}

model LiveBroadcast {
  id            String   @id @default(cuid())
  title         String
  host          String
  description   String
  streamUrl     String
  transcription Transcription?
  startTime     DateTime
  endTime       DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  comments      Comment[]
  playbackProgress PlaybackProgress[]
  mediaHistories MediaHistory[]
}

model Transcription {
  id           String     @id @default(cuid())
  content      String     // Full transcription text or JSON structure
  language     String     @default("en")
  format       String?    // e.g., plain_text, json, srt, etc.
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  audiobook    Audiobook  @relation(fields: [audiobookId], references: [id])
  audiobookId  String     @unique
   podcastId      String?  @unique
  podcast        Podcast? @relation(fields: [podcastId], references: [id])
  liveBroadcastId String? @unique
  liveBroadcast  LiveBroadcast? @relation(fields: [liveBroadcastId], references: [id])
}


model Comment {
  id             String   @id @default(cuid())
  content        String
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  audiobookId    String?
  audiobook      Audiobook? @relation(fields: [audiobookId], references: [id])
  podcastId      String?
  podcast        Podcast? @relation(fields: [podcastId], references: [id])
  liveBroadcastId String?
  liveBroadcast  LiveBroadcast? @relation(fields: [liveBroadcastId], references: [id])
  parentId       String?
  parent         Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies        Comment[] @relation("CommentReplies")
}

model Review {
  id           String   @id @default(cuid())
  rating       Int
  comment      String?
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  audiobookId  String?
  audiobook    Audiobook? @relation(fields: [audiobookId], references: [id])
  podcastId    String?
  podcast      Podcast? @relation(fields: [podcastId], references: [id])
  @@unique([userId, audiobookId])
  @@unique([userId, podcastId])
}

model Bookmark {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  audiobookId String?
  audiobook   Audiobook? @relation(fields: [audiobookId], references: [id])
  podcastId   String?
  podcast     Podcast? @relation(fields: [podcastId], references: [id])
  position    Int
  createdAt   DateTime @default(now())
}

model PlaybackProgress {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  audiobookId String?
  audiobook   Audiobook? @relation(fields: [audiobookId], references: [id])
  podcastId   String?
  podcast     Podcast? @relation(fields: [podcastId], references: [id])
  liveBroadcastId String?
  liveBroadcast LiveBroadcast? @relation(fields: [liveBroadcastId], references: [id])
  position    Int
  updatedAt   DateTime @updatedAt
}

model Favorite {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  audiobookId String?
  audiobook   Audiobook? @relation(fields: [audiobookId], references: [id])
  podcastId   String?
  podcast     Podcast? @relation(fields: [podcastId], references: [id])
  createdAt   DateTime @default(now())
  @@unique([userId, audiobookId])
  @@unique([userId, podcastId])
}

model Notification {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  message     String
  link        String?
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
}

model Playlist {
  id        String    @id @default(cuid())
  name      String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  isPrivate Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  items     PlaylistItem[]
}

model PlaylistItem {
  id          String   @id @default(cuid())
  playlist    Playlist @relation(fields: [playlistId], references: [id])
  playlistId  String
  audiobookId String?
  audiobook   Audiobook? @relation(fields: [audiobookId], references: [id])
  podcastId   String?
  podcast     Podcast? @relation(fields: [podcastId], references: [id])
  order       Int
}

model MediaHistory {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  audiobookId String?
  audiobook   Audiobook? @relation(fields: [audiobookId], references: [id])
  podcastId   String?
  podcast     Podcast? @relation(fields: [podcastId], references: [id])
  liveBroadcastId String?
  liveBroadcast LiveBroadcast? @relation(fields: [liveBroadcastId], references: [id])
  listenedAt  DateTime @default(now())
}

model Report {
  id           String   @id @default(cuid())
  reporter     User     @relation("UserReports", fields: [userId], references: [id])
  userId       String
  reason       String
  resolved     Boolean  @default(false)
  targetType   String
  targetId     String
  createdAt    DateTime @default(now())
}